---
layout: default
---
<%
function escape(s) {
    if (s) {
      return s.replace(/\r\n\* /g, '<li>').replace(/\n\* /g, '<li>').replace(/\r\n/g, '<br>').replace(/\n/g, '<br>');
    }
    return "";
}
function isRequired(key,requiredProperties) {
	if( _.indexOf(requiredProperties,key,0) != -1 )
		return "_Required_";
	else
		return "";
}
function createLink(str,link){
  return "[" + str + "](" + link+ ")";
}
function getType(valueObject) {
var type=valueObject.type;
  if(type == "anyOf")
    { var str="";
      var curObj=valueObject["anyOf"];
      _.each(curObj,function(obj,index){
        if(index != (curObj.length - 1) )
            str = str + getType(obj) + "&#124;" ;
        else
            str = str + getType(obj) ;
      });
      return str;
    }
  if(type == "array"){
    var items=valueObject["items"];
    var str="";
    if(items.properties)
      return "Array of Object Containing following Properties" + NestedProperties(items);
    if(valueObject["items"]){
      var str=getType(valueObject["items"])
        return str+"[]";
    }

  }
  if(valueObject["$linkPath"]){
    return createLink("`" + valueObject["type"] + "`",valueObject["$linkPath"]);
  }
  else{
    if( valueObject["format"])
      return "`"+valueObject["format"]+"`";
    else{
      if(valueObject["type"])
        return "`"+valueObject["type"]+"`";
    }

  }
      return "";

}
function NestedProperties(valueObj){
  if(valueObj["properties"] && Object.keys(valueObj["properties"]).length > 0){

    var string="\n### &ensp;&ensp;**Properties**\n";
    _.forOwn(valueObj["properties"], function (value,prop) {
      if(value["description"])
        description=value["description"];
      else
        description="";
  string=string + "*  ###  **"+prop+":** &ensp;"+getType(value)
  +"\n&ensp;&ensp;&ensp;&ensp;"+description+"\n";

  });
  return string;
  }
}

function displayEnum(valueObj){
  if(valueObj["enum"]){
    enumArray = valueObj["enum"];
  var str="<br/>*x &isin; {";
  _.each(enumArray,function(item,index){
    if(index != (enumArray.length - 1) )
      str=str+item+",";
    else
      str=str+item+"}*<br/><br/>";

  });
  return str;
  }
  return "";
}
%>
# <%- schema["title"] %>

<%- schema["description"] %>
### Properties

<% _.forOwn(schema.properties, function (value,prop) { %>

##  **<%- prop %>**:
<%- getType(value) %> <%- isRequired(prop,schema["required"]) %>

<%- escape(value["description"]) %><%- displayEnum(value) %><%- NestedProperties(value)  %>
<% }); %>
