<%- include("meta",{schema:schema,_:_}) %>
<%var HelperFunctions={
  nestLevel:0,
  isRequired : function (key,requiredProperties) {
    if( _.indexOf(requiredProperties,key,0) != -1 )
    return "    \n* **Required**";
    else
    return "";
  },
  createLink: function(str,link){
    return "[" + str + "](" + link+ ")";
  },
  linkProperty: function(str){
    if(validUrl.isUri(str)){
      arr=str.split("/");
      text=arr[arr.length - 1 ];
      return HelperFunctions.createLink(text,str);
    }
    else
      return str;
  },
  checkRefrence:  function(refObject,flag,nchild){

    // if(refObject.$linkVal && refObject.$linkPath){
    //   if(flag)
    //     return "  \n **Refrenced From** "+ HelperFunctions.createLink(refObject.$linkVal,refObject.$linkPath);
    //   else if(nchild > 0)
    //     return "  \n* "+ HelperFunctions.createLink(refObject.$linkVal,refObject.$linkPath);
    //     else
    //       return "  \n"+ HelperFunctions.createLink(refObject.$linkVal,refObject.$linkPath);
    // }

  },
  escapeText: function(text){
    return text.replace(/\n- /g,"\n  - ");

  },
  getDescriptionForKeyword: function(keyword,value){
    switch(keyword){
      case "oneOf": return "    \n**Only one of the following conditions must be met**" ;
      case "allOf": return "    \n**All following conditions must be met**" ;
      case "anyOf": return "    \n**Any one of the following conditions must be met**" ;
      case "items": {
        if(typeof value === "object" && value.type)
          return "  \n **Array of**" + " " + value.type;
        else   return "  \n **Array Of**";
    }
      case "contains": return "At least one of the element of array should be following \n" ;
      case "patternProperties": return "Pattern Specific Properties \n";
      case "additionalProperties": break;
      case "additionalItems": break;
      case "not": break;
      case "propertyNames": break;
    }
  },
  displayExamples: function (examples){
  	var str="\n";
    examples.map((item,index) => {
      var temp=JSON.stringify(item,null, 4);
      str=str+"```json\n"+temp+"\n```\n\n";
    });
  	return str;
  },
  displayEnum: function(value){
    var str="  \n[ ";
    value.map((item,index) => {
      if(index != (value.length - 1) )
        str=str+item+", ";
      else
        str=str+item+" ]";

    });
    return str;
  },
  displayType: function(value,level){

      var typeVal=value["type"];
      var word1="";

      switch(typeVal){
        case "oneOf" : word1 = "Only one of "; break;
        case "anyOf" : word1 = "Either "; break;
        case "array" : word1 = "Array of "; break;
        case "object": word1 = "";break;
      }

      var str2="",str="",str3="";
      if(level === 1)
      str="  \n*  **Type:** "
      else if(level === 3)
      str="  "
      else if(level === 4)
      str="  \n        *  Type:  "
      else if(level === 2)
      str= "  \n    * "
    if(!value["$ref"]){
      //  var str="  \n "//" Type: ",
      if(typeVal === "anyOf" || typeVal === "oneOf"){
        var arr= value[typeVal]; //if not throw error
        _.each(arr,function(item,index){
          if(item["type"] != "anyOf" && item["type"] != "oneOf" && item["type"] != "array"){
            if(item["$ref"]){

              if(index === 0)
              {str2= str2 + HelperFunctions.createLink(item["$linkVal"],item["$linkPath"]);}
              else
              str2= str2 + " or "+ HelperFunctions.createLink(item["$linkVal"],item["$linkPath"])

            }
            else{
              //TODO
            }
          }
          else{
            str2= str2 + HelperFunctions.displayType(item,2);
            //return HelperFunctions.displayType(item);
          }

        })
      }
      else if(typeVal === "array" && value["items"] ){
        //str2=str2+"Array Of ";
        if(_.isArray(value["items"])){
          _.forOwn(value["items"],(item,key,object)=>{
            if(item["type"] != "anyOf" && item["type"] != "oneOf" && item["type"] != "array"){
              if(item["$ref"]){
                // str2= str2 + HelperFunctions.createLink(item["$linkVal"],item["$linkPath"]) + " or "
              }
              else{
                //TODO
              }
            }
            else{
              str2= str2 + HelperFunctions.displayType(item,2);
            }
          })
        }
        else if(typeof value["items"] === "object"){
          if(value["items"]["type"] != "anyOf" && value["items"]["type"] != "oneOf" && value["items"]["type"] != "array"){
            if(value["items"]["$ref"] && !value["items"]["properties"]){
              str2= str2 + HelperFunctions.createLink(value["items"]["$linkVal"],value["items"]["$linkPath"]);
            }
            else{
              str2=""
              if(value["items"]["properties"]){
                var nschema=value["items"];
                str3=str3+"following Properties  ";
                _.forOwn(nschema.properties,(val,key) =>
                {
                  str3=str3+"\n    * **"+HelperFunctions.linkProperty(key)+"**"+HelperFunctions.displayType(val,4)+displayIfExists(val,"description")


                })

              }else {
                if(value["items"]["type"])
                if(value["items"]["type"].length > 1)
                str3 = str3 + value["items"]["type"];
              }
            }
          }
          else{
            str2= str2 + HelperFunctions.displayType(value["items"],3);
          }
        }
      }
      else if(typeVal){
        if(_.isArray(typeVal)){
          _.each(typeVal, (item,index) => {
            if(index != typeVal.length - 1)
            str2=str2 +item+ ', '
            else str2=str2 + item;
          })
        }
        else
        str2=str2 + typeVal;
      }
      if(str2.length > 1)
      return str+ word1 + str2 ;
      else if(str3.length > 1)
      return str+ word1 + str3 ;
      else{

        return ""
      }
    }
    else {
      return str + word1 + HelperFunctions.createLink(value["$linkVal"],value["$linkPath"])
    }
  },
  displayFormat: function(value){
    var str = "";
    if(value["format"])
      str = str + "  \n*  **Format:** " +value["format"] ;

    return str;

  },
  getSimpleKeywords: function (object){
    var str="";
    Object.keys(object).map((keyword) => {
      var value=object[keyword];
      switch(keyword){
        case "description": break;
        case "multipleOf": str = str+"  \n"+"This value should be a multiple of "+value; break;
        case "maximum": str = str+"  \n"+"**Maximum value:** "+value; break;
        case "exclusiveMaximum": str = str+"  \n"+"**Maximum value (strictly less than):** "+value; break;
        case "minimum": str = str+"  \n"+"**Minimum value:** "+value; break;
        case "exclusiveMinimum": str = str+"  \n"+"**Minimum value (strictly less than):** "+value; break;
        case "maxLength": str = str+"  \n"+"**Maximum length:** "+value; break;
        case "minLength": str = str+"  \n"+"**Minimum length:** "+value; break;
        case "pattern": str = str+"  \n"+"**Pattern for the value:** " +value; break;
        case "maxItems": str = str+"  \n"+"**Maximum number of items:** "+value ;break;
        case "minItems":  str = str+"  \n"+"**Minimum number items:** "+value ;break;
        case "maxProperties": str = str+"  \n"+"**Max properties:** ";break;//Should these be there?
        case "minProperties": str = str+"  \n"+"**Min properties:** ";break;
        //case "uniqueItems": str = str+"  \n"+"This contains unique items";break;
        case "examples": str = str+"  \n"+"**Examples:**" + HelperFunctions.displayExamples(value);break;
        case "enum": str = str+"  \n"+"This value can be one of the following **enum values**"+ HelperFunctions.displayEnum(value);break;

      }
    })
    return str;
  },
  getDependencies: function(dependencyMap,schema){

    var id="",title="";
    if(schema["$id"])
      id=schema["$id"];
    if(schema["title"])
      title=schema["title"]
    var mainId=id;
    var str = title + " is based on:  \n";
    var usemap={};
    var str2="";
    var recurse = function(dmap,level){

      if(dmap)
      {

        if(Object.keys(dmap).length > 0){

          _.forOwn(dmap,(val,key) => {
            if(!(key in usemap)){
              str2 = str2 + "  \n" +Array(level * 4).join(" ") + "* "+HelperFunctions.createLink(val.$linkVal,val.$linkPath);
              //  console.log("str2");
              usemap[key]=1;
              if(dependencyMap[key] && Object.keys(dependencyMap[key]).length > 0){
                if(key != mainId)
                recurse(dependencyMap[key],level+1)

              }
              else
              return str2;
            }
            else
            return ""

          })
        }
        else {
          return ""
        }
      }
      else
      return ""
      return str2;
    }
    if(dependencyMap[id]){
      if(Object.keys(dependencyMap[id]).length > 0)
        return str + recurse(dependencyMap[id],0)
      else
        return "";
    }
    else {
      return "";
    }


  }
}

function displayIfExists(object,key){
  if(object[key])
    return "  \n" + HelperFunctions.escapeText(object[key]);
  else
    return ""
}

function displayStringIfExists(object,key,str){
  if(object[key])
    return "  \n" + str;
}

%>
<%- displayStringIfExists(schema,"title","# "+schema["title"]) %>
<%- HelperFunctions.getDependencies(dependencyMap,schema) %>
<%- HelperFunctions.displayType(schema,1) %>
<%- displayIfExists(schema,"description") %>
<%- HelperFunctions.getSimpleKeywords(schema) %>
<%  if(schema.properties && Object.keys(schema.properties).length > 0){ %>

## Properties

<%    Object.keys(schema.properties).map((prop) => { var value= schema.properties[prop]; HelperFunctions.nestLevel = 0; %>
###  <%- HelperFunctions.linkProperty(prop) %><%- HelperFunctions.isRequired(prop,schema.required) %><%- include('innerSchema', {nschema: value, HelperFunctions:HelperFunctions,flag:true,nchild:0,sName:HelperFunctions.linkProperty(prop)}) %><% });} %>

<% if(!schema.properties || (Object.keys(schema.properties).length == 0) && schema.definitions){  %>

<%    Object.keys(schema.definitions).map((def) => { var value= schema.definitions[def];  HelperFunctions.nestLevel = -1; %>
##  <%- HelperFunctions.linkProperty(def)
%><% if(value["properties"]){
%>
### Properties
<%    Object.keys(value.properties).map((prop) => { var val= value.properties[prop]; HelperFunctions.nestLevel = 0; %>
###  <%- HelperFunctions.linkProperty(prop) %><%- HelperFunctions.isRequired(prop,value.required)
%><%- include('innerSchema', {nschema: val, HelperFunctions:HelperFunctions,flag:true,nchild:0,sName:HelperFunctions.linkProperty(prop)
})%><% })
}
})} %>
